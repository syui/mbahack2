<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hack | MBA-HACK2]]></title>
  <link href="https://mbahack2.syui.cf/blog/categories/hack/atom.xml" rel="self"/>
  <link href="https://mbahack2.syui.cf/"/>
  <updated>2017-05-24T00:40:01+00:00</updated>
  <id>https://mbahack2.syui.cf/</id>
  <author>
    <name><![CDATA[syui]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[react-webpack]]></title>
    <link href="https://mbahack2.syui.cf/blog/2016/05/14/react-webpack"/>
    <updated>2016-05-14T00:00:00+00:00</updated>
    <id>https://mbahack2.syui.cf/blog/2016/05/14/react-webpack</id>
    <content type="html"><![CDATA[<p><img src="/images/more.png" alt="phoenix-power" align="left">ReactとWebpackが便利です。<!--more--><br clear="all"></p>

<h2>ReactとWebpackを使ってテンプレートを作成する</h2>

<p>例えば、<a href="https://github.com/wmdmark/react-terminal">react-terminal</a>というものがあります。</p>

<p>これは<code>jquery.terminal</code>のような動きをします。</p>

<p>具体的には、Webからユーザーのリクエストを受けて表示内容を決める Web Terminal のようなページを作成するためのツールですね。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/wmdmark/react-terminal&quot;</span>&gt;https://github.com/wmdmark/react-terminal&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span><span class="nb">cd </span>react-terminal&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>npm i -g react-tools webpack webpack-dev-server
</span><span class='line'><span class="nv">$ </span>npm i&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>webpack&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>webpack-dev-server <span class="p">&amp;</span>ndash<span class="p">;</span>content-base build/ -d
</span><span class='line'>or
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ./build
</span><span class='line'><span class="nv">$ </span>jekyll server&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>curl -sL localhost:8080
</span></code></pre></td></tr></table></div></figure></p>

<p>何がどのように動作しているのかは、コードを見ればだいたい分かると思います。例えば、新しいコマンドを追加してみましょう。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim src/commands/basic.coffee&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;ls <span class="o">=</span> <span class="o">(</span>state, args<span class="p">&amp;</span>hellip<span class="p">;</span><span class="o">)</span>-&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;output <span class="o">=</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>index.coffee<span class="p">&amp;</span>rdquo<span class="p">;</span>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;state.buffer.push<span class="o">(</span>output<span class="o">)</span>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;<span class="o">{</span>buffer: state.buffer<span class="o">}</span>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;module.exports <span class="o">=</span> <span class="o">{</span><span class="nb">help</span>, clear, <span class="nb">echo</span>, su<span class="o">}</span>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;module.exports <span class="o">=</span> <span class="o">{</span><span class="nb">help</span>, clear, <span class="nb">echo</span>, su, ls<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></li>
</ul>


<p>これで、<code>localhost:8080</code>にアクセスし、<code>ls</code>を実行してみましょう。<code>index.coffee</code>があれば成功です。もちろん、実際にあるわけではなく見せかけです。</p>

<p>ちなみに、<code>webpack-dev-server</code>が動作している間は、変更が反映されますので、わざわざ<code>webpack</code>コマンドでビルドする必要はありません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[blogger-cl]]></title>
    <link href="https://mbahack2.syui.cf/blog/2016/05/07/blogger-cl"/>
    <updated>2016-05-07T00:00:00+00:00</updated>
    <id>https://mbahack2.syui.cf/blog/2016/05/07/blogger-cl</id>
    <content type="html"><![CDATA[<p><img src="/images/more.png" alt="phoenix-power" align="left">Google APIのBlogger v3を使ってBloggerにポストしてみました。<!--more--><br clear="all"></p>

<p>昔は、Google CLというものがありまして、非常に便利でした。これは、各種GoogleサービスAPIのCLIクライアントという感じのものですが、Google APIがOAuth2.0対応のみになったためOAuth1.0のGoogleCLは使えなくなりました。</p>

<p>現在、リポジトリのほうはForkされて引き継がれているため、動くと思うのですが、なんかよくわからなかったので、自分で適当なクライアントを作ってみました。</p>

<p><a href="https://github.com/syui/blogger-cl">https://github.com/syui/blogger-cl</a></p>

<p>仕組みは簡単で、単にcurlでAPIを叩いているだけです。</p>

<p>これも前回作成したGoogle+ APIを使ったもののコピーとなっています。多少仕様が変更されているのか、動かなかったものもありますが、ほぼそのままで動かせました。</p>

<p>OAuth2.0認証なので、ログインして、適切な権限を与えてください。</p>

<p>あと、上のリポジトリはクライアントとして作成するのではなく、あくまでクライアントを動作させる仕組みですので、使う人は自身でAPIを動かすために必要なクライアントキーを用意する必要があります。</p>

<p>つまり、私自身はキーを提供しませんので、ログイン認証や承認すれば使えるというものではなく、Google APIのBloggerを有効にし、クライアントキーなど必要なものを用意して動かす形になります。もちろんログイン認証なども必要。その点で言えば開発者向けです。</p>

<p>手順としては、以下です。</p>

<h2>Blogger APIの有効化</h2>

<ul>
<li><a href="https://console.developers.google.com">https://console.developers.google.com</a></li>
</ul>


<h2>OAuth2.0クライアントIDの発行とダウンロード</h2>

<ul>
<li><a href="https://console.developers.google.com/apis/credentials">https://console.developers.google.com/apis/credentials</a></li>
</ul>


<p>ダウンロードしたものは、リポジトリルートの<code>./json</code>に置くか<code>~/Downloads</code>においてください。</p>

<p>あとは、以下のコマンドを実行します。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/syui/blogger-cl&quot;</span>&gt;https://github.com/syui/blogger-cl&lt;/a&gt;
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>blogger-cl&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Blogger IDは管理画面ダッシュボードのURLを見てください&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>vim blogger.json&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;jq&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>./blogger-cl&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;ブラウザが開き<span class="o">(</span>Mac:Chrome,Linux:Firefox<span class="o">)</span>、承認を求められます&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;承認したら端末に戻ってEnterを押します。Tokenなどが取得できていれば成功&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;自動でエディタ<span class="o">(</span>vim<span class="o">)</span>を開き所定の形式が表示されます。それを保存したらポストされます&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;テスト機能:過去記事の編集とポスト<span class="o">(</span>peco<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>./blogger-cl -u
</span></code></pre></td></tr></table></div></figure></p>

<p>良さなクライアントアプリができたら是非教えて下さい。通常のクライアントアプリは、以下のライブラリなどを使い、サンプルを見ながら作るのが一般的だと思われます。私は過去に作ったスクリプトをコピーして使いましたが、はじめての方はライブラリを使った方法のほうが早く完成します。</p>

<p>ライブラリ</p>

<p><a href="https://github.com/google/google-api-go-client/tree/master/blogger/v3">https://github.com/google/google-api-go-client/tree/master/blogger/v3</a></p>

<p>サンプル</p>

<p><a href="https://github.com/google/google-api-go-client/tree/master/examples">https://github.com/google/google-api-go-client/tree/master/examples</a></p>

<p>To-Do</p>

<p>現在、jsonでそのまま書きますが、所定の形式(yml,toml)などをjsonに自動変換する処理を入れても良いと思います。また、テキストもhtmlで書くのではなく、markdownで書き、変換してポストするのもよいと考えています。</p>

<p>ただ、変換に使うツールへの依存が生じ、それを解消するためには一般言語で書いたほうが良いかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docker-proxy]]></title>
    <link href="https://mbahack2.syui.cf/blog/2016/05/06/docker-proxy"/>
    <updated>2016-05-06T00:00:00+00:00</updated>
    <id>https://mbahack2.syui.cf/blog/2016/05/06/docker-proxy</id>
    <content type="html"><![CDATA[<p><img src="/images/more.png" alt="phoenix-power" align="left">基本的にサーバーで設定すべき事柄はDockerで代替すると便利です。<!--more--><br clear="all"></p>

<p>イメージはAlpineです。非常に早く、容量も少ないのでおすすめです。</p>

<h2>Blocklist(AdBlock)を設定したプロキシサーバー経由でアクセスする</h2>

<pre><code class="bash"># https://hub.docker.com/r/syui/docker-alpine-privoxy-block/
$ sudo docker run -d -p 8119:8119 syui/docker-alpine-privoxy-block

$ curl -sL -x localhost:8119 ipinfo.io
</code></pre>

<h2>Torへの接続にPrivoxyを経由させる</h2>

<pre><code class="bash"># https://hub.docker.com/r/syui/docker-alpine-privoxy-block-tor/
$ sudo docker run -d -p 8118:8118 -p 9050:9050 syui/docker-alpine-privoxy-block-tor

$ curl -sL -x localhost:8118 ipinfo.io
$ echo "proxy = localhost:8118" &gt;&gt; ~/.curlrc
$ curl -sL ipinfo.io
</code></pre>

<p>sourceはGitHubのほうにも置いておきます。</p>

<p><a href="https://github.com/syui/docker-alpine-privoxy-block">https://github.com/syui/docker-alpine-privoxy-block</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[transparent-proxy]]></title>
    <link href="https://mbahack2.syui.cf/blog/2016/04/07/transparent-proxy"/>
    <updated>2016-04-07T00:00:00+00:00</updated>
    <id>https://mbahack2.syui.cf/blog/2016/04/07/transparent-proxy</id>
    <content type="html"><![CDATA[<p><img src="/images/more.png" alt="phoenix-power" align="left">面倒な明示を必要としない透過プロキシの使い方など<!--more--><br clear="all"></p>

<p>透過プロキシは、SHELL変数とかに依存しないので便利です。</p>

<p>例えば、ここでは、<code>privoxy</code>を使います。</p>

<p>これは、主に、cookie無効化とかuser agent偽造とか広告ブロックとかアクセス制限とか、そういうのを常時有効にしたい人が使いますね。</p>

<p><figure class='code'><figcaption><span>/etc/privoxy/config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;all network&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;listen-address 192.168.1.X:8118&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;local network&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;listen-address 127.0.0.1:8118&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;tor socks5&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;forward-socks5 / 127.0.0.1:9050 .&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;transparent proxy&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;accept-intercepted-requests 1
</span></code></pre></td></tr></table></div></figure></p>

<p><code>listen-address</code>は、デフォルトでは、<code>localhost:8118</code>になります。これは、ローカルで使う場合ですね。</p>

<p>他のパソコンから当該プロキシサーバーを経由したい場合は、<code>ifconfig</code>で調べたサーバーのアドレスを記述すればいいです。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo systemctl start privoxy
</span><span class='line'><span class="nv">$ </span>sudo systemctl <span class="nb">enable </span>privoxy
</span></code></pre></td></tr></table></div></figure></p>

<p><code>iptables</code>を使う場合は以下のような感じ。簡単ですね。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;iptables&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>sudo iptables -t nat -A PREROUTING -s 192.168.1.X -p tcp <span class="p">&amp;</span>ndash<span class="p">;</span>dport <span class="m">80</span> -j REDIRECT <span class="p">&amp;</span>ndash<span class="p">;</span>to-ports 8118
</span></code></pre></td></tr></table></div></figure></p>

<p>各種デバイスで上記で立ち上げた<code>privoxy proxy server</code>を経由する場合は、通常、各種OSのネットワーク設定からプロキシ設定を<code>192.168.1.X:8118</code>にすればいけます。Xはサーバーのアドレス。</p>

<p>ネットワーク設定で一括指定できるので、面倒ではないですね。</p>

<p>通常のローカルネットワークというのは、このようにローカルネットワーク内に設置された一つのプロキシサーバーを経由して、WANとのやり取りをするようになっており、これによって一括してログやアクセス制限が可能な仕組みが一般的です。</p>

<p><code>config</code>は、デフォルトで<code>user.*</code>を読み込んでいて、それに記述することでユーザー設定が出来ます。cookieを強くすると、認証が失敗することもあるので弱めに。</p>

<p><figure class='code'><figcaption><span>/etc/privoxy/user.action </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;UA&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">{</span> +hide-user-agent<span class="o">{</span> Opera/9.51 Beta <span class="o">(</span>Microsoft Windows<span class="p">;</span> PPC<span class="p">;</span> Opera Mobi/1718<span class="p">;</span> U<span class="p">;</span> en<span class="o">)</span> <span class="o">}</span> <span class="o">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;Cookie&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">{</span> +crunch-incoming-cookies +crunch-outgoing-cookies +filter<span class="o">{</span>content-cookies<span class="o">}</span> <span class="o">}</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">{</span> +session-cookies-only <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>広告はファイルを自動ダウンロードして設定するものがありますので、<a href="https://github.com/Andrwe/privoxy-blocklist">そちら</a>を。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/Andrwe/privoxy-blocklist&quot;</span>&gt;https://github.com/Andrwe/privoxy-blocklist&lt;/a&gt;
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>privoxy-blocklist
</span><span class='line'><span class="nv">$ </span>chmod +x privoxy-blocklist.sh
</span><span class='line'><span class="nv">$ </span>sudo su
</span><span class='line'><span class="nv">$ </span>./privoxy-blocklist.sh&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;コメント削除&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>vim /etc/conf.d/privoxy-blacklist
</span><span class='line'><span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">PRIVOXY_USER</span><span class="o">=</span>xxx<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">PRIVOXY_GROUP</span><span class="o">=</span>xxx<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">PRIVOXY_CONF</span><span class="o">=</span>xxx<span class="p">&amp;</span>rdquo<span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;再実行&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>./privoxy-blocklist.sh&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;再起動&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>systemctl restart privoxy
</span></code></pre></td></tr></table></div></figure></p>

<p>参考</p>

<p><a href="http://blog.asial.co.jp/1076">http://blog.asial.co.jp/1076</a></p>

<p><a href="https://wiki.archlinuxjp.org/index.php/Privoxy">https://wiki.archlinuxjp.org/index.php/Privoxy</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux-vpn]]></title>
    <link href="https://mbahack2.syui.cf/blog/2016/04/02/linux-vpn"/>
    <updated>2016-04-02T00:00:00+00:00</updated>
    <id>https://mbahack2.syui.cf/blog/2016/04/02/linux-vpn</id>
    <content type="html"><![CDATA[<p><img src="/images/more.png" alt="phoenix-power" align="left">LinuxでVPN Clientを使う方法など<!--more--><br clear="all"></p>

<h2>Arch LinuxでVPN接続する方法</h2>

<p>まずは、Arch LinuxでのVPN接続方法です。VPN Serverは<a href="http://www.vpngate.net/ja/">VPN Gate</a>を使います。</p>

<p>最も簡単なのは、<code>networkmanager</code>を使うことです。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo pacman -S networkmanager networkmanager-openvpn network-manager-applet
</span><span class='line'><span class="nv">$ </span>sudo systemctl start NetworkManager
</span><span class='line'><span class="nv">$ </span>nm-applet
</span></code></pre></td></tr></table></div></figure></p>

<p>メニューにアイコンが表示されますので、そこから<code>VPN接続 &gt; VPNを設定 &gt; 追加 &gt; 保存したVPN接続をインポート</code>します。</p>

<p>OpenVPNの設定ファイルをダウンロードして、そこからCA鍵を抜き出し、<code>crt</code>ファイル(CA証明書)を作成します</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/Downloads
</span><span class='line'><span class="nv">$ </span>cat foo.ovpn <span class="p">|</span> grep <span class="p">&amp;</span>lsquo<span class="p">;</span>&lt;/ca&gt;<span class="p">&amp;</span>rsquo<span class="p">;</span> -B22 <span class="p">|</span> sed -e 1d -e <span class="p">&amp;</span>lsquo<span class="p">;</span><span class="nv">$d</span><span class="p">&amp;</span>rsquo<span class="p">;</span> &gt; foo.crt
</span></code></pre></td></tr></table></div></figure></p>

<p>タイプはパスワードを選択し、パスワードやユーザーは<code>vpn</code>を入力します。CA証明書は先ほど作成したものを選択。</p>

<p>通常はこの手順で接続できますが、接続できない場合は、他のサーバーを試してみてください。上手く接続できないサーバーはいくつかあります。</p>

<p><code>L2TP/IPsec</code>は簡単に接続できるものの、速度が遅いです。</p>

<h2>Arch LinuxでTor接続する方法</h2>

<p>最近、<code>systemctl</code>で起動するようになりました。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo pacman -S tor
</span><span class='line'><span class="nv">$ </span>sudo cp /etc/tor/torrc-dist /etc/tor/torrc&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>sudo vim !<span class="nv">$&lt;</span>/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;PublishServerDescriptor 0&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;StrictNodes 1&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;CircuitBuildTimeout 30&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;ExcludeNodes <span class="o">{</span>jp<span class="o">}</span>,<span class="o">{</span>us<span class="o">}</span>,<span class="o">{</span>cn<span class="o">}</span>,<span class="o">{</span>ru<span class="o">}</span>,127.0.0.1&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;ExcludeExitNodes <span class="o">{</span>jp<span class="o">}</span>,127.0.0.1&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;EntryNodes 127.0.0.1&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;NewCircuitPeriod 200
</span><span class='line'>MaxCircuitDirtiness 150
</span><span class='line'>ExitNodes <span class="o">{</span>ru<span class="o">}</span>,<span class="o">{</span>su<span class="o">}</span>
</span><span class='line'>NumEntryGuards 5&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>sudo systemctl start tor
</span></code></pre></td></tr></table></div></figure></p>

<p>あとは、簡単な設定を行うと、<code>Tor -&gt; VPN</code>経由で接続が確立できます。</p>

<p><img src="https://raw.githubusercontent.com/mba-hack/images/master/linux-vpn-gate.png" alt="" /></p>

<p>左側が本来のIPアドレスです。右側がプロキシサーバー経由のアドレス。このように、アクセス元を隠すことが出来ます。</p>

<h2>AndoridでOpenVPN Connectを使う</h2>

<p><a href="https://play.google.com/store/apps/details?id=net.openvpn.openvpn&amp;hl=ja">OpenVPN Connect</a></p>

<p>公式ページに速度が載っていますが、<code>L2TP/IPsec</code>は遅いので、常時VPNするには、こちらのアプリを使用して接続したほうが良いです。また、Google Andoridの基本設定で接続するVPNは、ロック画面を用意しなければならないなど面倒くささがあります。</p>

<p>公式ページに書かれているとおりですが、それほどの複雑さはありません。単にファイルをダウンロードし、それをインポートするだけです。</p>

<p><img src="https://raw.githubusercontent.com/mba-hack/images/master/linux-vpn-gate-02.png" alt="" /></p>
]]></content>
  </entry>
  
</feed>
